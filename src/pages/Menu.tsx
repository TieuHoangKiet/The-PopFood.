import React, { useState, useEffect } from 'react';
import axios from 'axios';
import DishCard from '../components/DishCard';
import { Link } from 'react-router-dom';

interface Dish {
  id: string | number; // C·∫≠p nh·∫≠t ƒë·ªÉ ph√π h·ª£p v·ªõi c·∫£ s·ªë v√† chu·ªói
  name: string;
  category: string;
  type: string;
  price: number;
  image: string;
  available?: boolean;
  restaurantId?: string | string[]; // Th√™m n·∫øu DishCard c·∫ßn
  // region?: string; // N·∫øu c√≥ tr∆∞·ªùng region trong d·ªØ li·ªáu, c√≥ th·ªÉ th√™m
}

interface Promotion {
  id: string | number; // C·∫≠p nh·∫≠t ƒë·ªÉ ph√π h·ª£p
  title: string;
  description: string;
}

const Menu: React.FC = () => {
  const [dishes, setDishes] = useState<Dish[]>([]);
  const [filteredDishes, setFilteredDishes] = useState<Dish[]>([]);
  const [loading, setLoading] = useState(true);

  const [region, setRegion] = useState(''); // Filter theo category (mi·ªÅn/lo·∫°i)
  const [maxPrice, setMaxPrice] = useState('');
  const [type, setType] = useState('');
  const [searchTerm, setSearchTerm] = useState('');

  const [promotions, setPromotions] = useState<Promotion[]>([]);

  useEffect(() => {
    const fetchData = async () => {
      try {
        const [dishesRes, promoRes] = await Promise.all([
          axios.get<Dish[]>('http://localhost:3000/dishes'),
          axios.get<Promotion[]>('http://localhost:3000/promotions')
        ]);

        // ‚úÖ Ch·ªâ l·∫•y m√≥n available = true
        const availableDishes = dishesRes.data.filter(dish => dish.available === true);

        setDishes(availableDishes);
        setFilteredDishes(availableDishes);
        setPromotions(promoRes.data);
      } catch (err) {
        console.error('Kh√¥ng th·ªÉ t·∫£i d·ªØ li·ªáu', err);
        setDishes([]);
        setFilteredDishes([]);
      } finally {
        setLoading(false);
      }
    };

    fetchData();
  }, []);

  const handleApplyFilters = () => {
    let result = [...dishes];

    // --- S·ª≠a l·ªói filter region/category ---
    // Gi·ªù ƒë√¢y, 'region' filter th·ª±c ch·∫•t l√† filter theo 'category'
    if (region) {
      // --- S·ª≠a: So s√°nh kh√¥ng ph√¢n bi·ªát ch·ªØ hoa/th∆∞·ªùng ---
      result = result.filter(d => d.category.toLowerCase() === region.toLowerCase());
    }

    if (maxPrice) {
      const priceNum = parseInt(maxPrice, 10);
      if (!isNaN(priceNum)) {
        result = result.filter(d => d.price <= priceNum);
      }
    }

    if (type) {
      const lowerType = type.toLowerCase();
      if (lowerType === 'ƒÉn v·∫∑t') {
        // --- S·ª≠a: So s√°nh kh√¥ng ph√¢n bi·ªát ch·ªØ hoa/th∆∞·ªùng ---
        result = result.filter(d => d.category.toLowerCase().includes('ƒÉn v·∫∑t') || d.category.toLowerCase().includes('ƒë·ªì ƒÉn v·∫∑t'));
      } else if (lowerType === 'n∆∞·ªõc u·ªëng') {
        // --- S·ª≠a: So s√°nh kh√¥ng ph√¢n bi·ªát ch·ªØ hoa/th∆∞·ªùng ---
        result = result.filter(d => d.category.toLowerCase().includes('n∆∞·ªõc u·ªëng') || d.type === 'n∆∞·ªõc');
      } else if (lowerType === 'c∆°m') {
        result = result.filter(d => d.name.toLowerCase().includes('c∆°m'));
      } else if (lowerType === 'n∆∞·ªõc l·ªçc') {
        result = result.filter(d => d.name.toLowerCase().includes('n∆∞·ªõc l·ªçc'));
      } else {
        // --- S·ª≠a: So s√°nh kh√¥ng ph√¢n bi·ªát ch·ªØ hoa/th∆∞·ªùng cho type ---
        result = result.filter(d => d.type.toLowerCase() === lowerType);
      }
    }

    if (searchTerm) {
      const term = searchTerm.toLowerCase();
      result = result.filter(d => d.name.toLowerCase().includes(term));
    }

    setFilteredDishes(result);
  };

  const handleClearFilters = () => {
    setRegion('');
    setMaxPrice('');
    setType('');
    setSearchTerm('');
    setFilteredDishes(dishes);
  };

  if (loading) {
    return (
      <div className="container text-center my-5">
        <div className="spinner-border text-success" role="status"></div>
        <p className="mt-3">ƒêang t·∫£i d·ªØ li·ªáu...</p>
      </div>
    );
  }

  // --- H√†m h·ªó tr·ª£ ƒë·ªÉ l·∫•y danh s√°ch category duy nh·∫•t t·ª´ filteredDishes ---
  const getUniqueCategories = (dishes: Dish[]): string[] => {
    const categories = dishes.map(d => d.category);
    return Array.from(new Set(categories)).filter(cat => cat); // Lo·∫°i b·ªè category r·ªóng
  };

  // --- H√†m h·ªó tr·ª£ ƒë·ªÉ ph√¢n lo·∫°i m√≥n ƒÉn theo category ---
  const groupDishesByCategory = (dishes: Dish[]): { [key: string]: Dish[] } => {
    const groups: { [key: string]: Dish[] } = {};
    const validCategories = ['b·∫Øc', 'trung', 'nam', 'ƒë·ªì ƒÉn v·∫∑t', 'n∆∞·ªõc u·ªëng']; // Chuy·ªÉn sang ch·ªØ th∆∞·ªùng ƒë·ªÉ so s√°nh

    dishes.forEach(dish => {
      const dishCategoryLower = dish.category.toLowerCase();
      let groupKey = dishCategoryLower;

      // Gom nh√≥m c√°c category v√†o c√°c nh√≥m ch√≠nh n·∫øu c√≥ th·ªÉ
      if (dishCategoryLower.includes('n∆∞·ªõc u·ªëng')) {
        groupKey = 'n∆∞·ªõc u·ªëng';
      } else if (dishCategoryLower.includes('ƒÉn v·∫∑t') || dishCategoryLower.includes('ƒë·ªì ƒÉn v·∫∑t')) {
        groupKey = 'ƒë·ªì ƒÉn v·∫∑t';
      } else if (dishCategoryLower.includes('b·∫Øc')) {
        groupKey = 'b·∫Øc';
      } else if (dishCategoryLower.includes('trung')) {
        groupKey = 'trung';
      } else if (dishCategoryLower.includes('nam')) {
        groupKey = 'nam';
      }
      // N·∫øu kh√¥ng thu·ªôc nh√≥m n√†o, v·∫´n gi·ªØ category g·ªëc

      if (!groups[groupKey]) {
        groups[groupKey] = [];
      }
      groups[groupKey].push(dish);
    });

    // S·∫Øp x·∫øp l·∫°i th·ª© t·ª± c√°c nh√≥m ch√≠nh
    const orderedGroups: { [key: string]: Dish[] } = {};
    const order = ['b·∫Øc', 'trung', 'nam', 'ƒë·ªì ƒÉn v·∫∑t', 'n∆∞·ªõc u·ªëng'];
    order.forEach(key => {
        if (groups[key]) {
            orderedGroups[key] = groups[key];
        }
    });
    // Th√™m c√°c nh√≥m kh√°c (n·∫øu c√≥)
    Object.keys(groups).forEach(key => {
        if (!order.includes(key)) {
             orderedGroups[key] = groups[key];
        }
    });

    return orderedGroups;
  };

  const groupedDishes = groupDishesByCategory(filteredDishes);

  return (
    <div className="container my-5">
      {/* Khuy·∫øn m√£i */}
      {promotions.length > 0 && (
        <div className="alert alert-danger text-center mb-4" role="alert">
          <strong>üéâ {promotions[0].title}</strong> ‚Äì {promotions[0].description}
        </div>
      )}

      <h2 className="text-center mb-4">üçΩÔ∏è Th·ª±c ƒë∆°n The PopFood</h2>

      {/* B·ªô l·ªçc */}
      <div className="row g-3 mb-4">
        {/* T√¨m ki·∫øm */}
        <div className="col-12">
          <div className="input-group">
            <span className="input-group-text"><i className="bi bi-search"></i></span>
            <input
              type="text"
              className="form-control"
              placeholder="T√¨m m√≥n ƒÉn..."
              value={searchTerm}
              onChange={(e) => setSearchTerm(e.target.value)}
            />
          </div>
        </div>

        {/* Mi·ªÅn & Gi√° */}
        <div className="col-md-6">
          <select
            className="form-select"
            value={region}
            onChange={(e) => setRegion(e.target.value)}
          >
            <option value="">Ch·ªçn mi·ªÅn</option>
            <option value="B·∫Øc">Mi·ªÅn B·∫Øc</option>
            <option value="Trung">Mi·ªÅn Trung</option>
            <option value="Nam">Mi·ªÅn Nam</option>
          </select>
        </div>
        <div className="col-md-6">
          <div className="input-group">
            <span className="input-group-text">‚â§</span>
            <input
              type="number"
              className="form-control"
              placeholder="Gi√° t·ªëi ƒëa"
              value={maxPrice}
              onChange={(e) => setMaxPrice(e.target.value)}
            />
            <span className="input-group-text">ƒë</span>
          </div>
        </div>

        {/* Lo·∫°i */}
        <div className="col-12">
          <select
            className="form-select"
            value={type}
            onChange={(e) => setType(e.target.value)}
          >
            <option value="">Ch·ªçn lo·∫°i</option>
            <option value="m·∫∑n">ƒê·ªì m·∫∑n</option>
            <option value="chay">ƒê·ªì chay</option>
            <option value="ƒÉn v·∫∑t">ƒÇn v·∫∑t</option>
            <option value="n∆∞·ªõc u·ªëng">N∆∞·ªõc u·ªëng</option>
            <option value="c∆°m">C∆°m</option>
            <option value="n∆∞·ªõc l·ªçc">N∆∞·ªõc l·ªçc</option>
          </select>
        </div>

        {/* N√∫t */}
        <div className="col-12 d-flex gap-2 justify-content-center">
          <button className="btn btn-success px-4" onClick={handleApplyFilters}>
            <i className="bi bi-funnel"></i> L·ªçc
          </button>
          <button className="btn btn-outline-secondary px-4" onClick={handleClearFilters}>
            <i className="bi bi-x-circle"></i> B·ªè l·ªçc
          </button>
        </div>
      </div>

      {/* S·ªë l∆∞·ª£ng k·∫øt qu·∫£ */}
      <div className="text-muted mb-3">
        T√¨m th·∫•y <strong>{filteredDishes.length}</strong> m√≥n ƒÉn ph√π h·ª£p
      </div>

      {/* Danh s√°ch - ƒê√É S·ª¨A */}
      <div className="row g-4">
        {/* Duy·ªát qua c√°c nh√≥m ƒë√£ ƒë∆∞·ª£c ph√¢n lo·∫°i */}
        {Object.entries(groupedDishes).length > 0 ? (
          Object.entries(groupedDishes).map(([categoryKey, dishesInCategory]) => {
            // N·∫øu nh√≥m r·ªóng, b·ªè qua
            if (dishesInCategory.length === 0) return null;

            // ƒê·ªãnh d·∫°ng ti√™u ƒë·ªÅ nh√≥m
            let displayTitle = categoryKey;
            if (categoryKey === 'ƒë·ªì ƒÉn v·∫∑t') {
              displayTitle = 'üçü ƒÇn v·∫∑t';
            } else if (categoryKey === 'n∆∞·ªõc u·ªëng') {
              displayTitle = 'ü•§ N∆∞·ªõc u·ªëng';
            } else if (['b·∫Øc', 'trung', 'nam'].includes(categoryKey)) {
              displayTitle = `üáªüá≥ Mi·ªÅn ${categoryKey.charAt(0).toUpperCase() + categoryKey.slice(1)}`;
            } else {
              // Cho c√°c category kh√°c kh√¥ng n·∫±m trong 5 nh√≥m ch√≠nh
              displayTitle = categoryKey.charAt(0).toUpperCase() + categoryKey.slice(1);
            }

            return (
              <div className="col-12 mt-5" key={categoryKey}>
                <h4 className="text-success border-bottom pb-2">{displayTitle}</h4>
                <div className="row g-3">
                  {dishesInCategory.map(dish => (
                    <div className="col-12 col-md-6 col-lg-4" key={dish.id}>
                      <Link to={`/dish/${dish.id}`} style={{ textDecoration: 'none', color: 'inherit' }}>
                        <DishCard dish={dish} />
                      </Link>
                    </div>
                  ))}
                </div>
              </div>
            );
          })
        ) : (
          // Tr∆∞·ªùng h·ª£p kh√¥ng c√≥ m√≥n n√†o sau khi l·ªçc
          <div className="text-center text-muted my-5">
            <i className="bi bi-emoji-frown"></i> Kh√¥ng t√¨m th·∫•y m√≥n ƒÉn n√†o ph√π h·ª£p
          </div>
        )}
      </div>

      {/* Th√¥ng b√°o n·∫øu filteredDishes r·ªóng (ƒë√£ ƒë∆∞·ª£c x·ª≠ l√Ω ·ªü tr√™n) */}
      {/* {filteredDishes.length === 0 && (
        <div className="text-center text-muted my-5">
          <i className="bi bi-emoji-frown"></i> Kh√¥ng t√¨m th·∫•y m√≥n ƒÉn n√†o ph√π h·ª£p
        </div>
      )} */}
    </div>
  );
};

export default Menu;